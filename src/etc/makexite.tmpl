#!/bin/sh

# $Id$

############################################################################
#
# This script will perform the second stage of the installation of the
# XITE software.
#
# For usage, execute (while in the main XITE directory)
#
#     etc/makexite -help
#
# This script depends on:
#
#     XITE_HOME     (command-line parameter, environment variable or
#                    hardcoded in this script)
#
# The XITE_HOME parameter has a default value given either by the environment
# variable XITE_HOME or else by the value which was edited in automatically
# by the XITE install_xite script.
#
# Author: Svein Bøe, email: svein at ifi.uio.no or blab  at ifi.uio.no
#
############################################################################

Usage () {
    progNam=$1; message=$2

    [ -n "$message" ] && echo "$progNam: $message"

    $echoNl "usage: $progNam [<option>...] [<dir>...] [-y <m-opt>...] " 1>&2
    echo "[-z <m-macro>]" 1>&2
    echo "where <option> is one of"                                     1>&2
    echo "  -a <platform> : Give platform."                             1>&2
    echo "  -h(elp)       : Print this usage message."                  1>&2
    echo "  -c            : Clean."                                     1>&2
    echo "  -i            : Install header files."                      1>&2
    echo "  -l            : Build all functions in library."            1>&2
    echo "  -dso          : Build dynamic shared objects, if possible." 1>&2
    echo "  -e            : Build all executables."                     1>&2
    echo "  -d            : Build documentation."                       1>&2
    echo "  -all          : All of '-c', '-i', '-l', '-dso', '-e' and"  1>&2
    echo "                  '-d'."                                      1>&2
    echo "                  This is the default behaviour."             1>&2
    echo "  -v            : Verbose."                                   1>&2
    echo "  -vv           : Very verbose."                              1>&2
    echo "  -xe           : Build X executables."                       1>&2
    echo "  -xite         : XITE home directory."                       1>&2
    echo "  -p            : Leave object files in platform-dep subdir." 1>&2
    echo "and <m-opt> (default '-r') and <m-macro> are passed on"       1>&2
    echo "                  to make(1)."                                1>&2
    echo "<dir>           : Source dir to process, or 'src' (meaning"   1>&2
    echo "                  the whole source tree, which is default)."  1>&2

} # Usage()

parseCmdLine () {
    while [ $# -gt 0 ]; do
	case "$1" in
	-a) shift
	    XITE_HOSTTYPE="$1"; shift
	    ;;
	-c)   
	    if [ "$clean" -eq 1 ];	then
		clean=2
	    else
		clean=1
	    fi
	    shift;;
	-i)   inc=1; shift;;
	-l)   lib=1; shift;;
	-dso) dso=1; shift;;
	-e)   pro=1; shift;;
	-d)   doc=1; shift;;
	-p)   loc_dir=1; shift;;
	-all) clean=2; inc=1; lib=1; pro=1; doc=1; shift;;
	-h|-help)
	    help=1; shift; break
	    ;;
	-xe)  xpro=1; shift;;
	-xite) shift
	    XITE_HOME="$1"; shift
	    ;;
	-v) verbose=1; shift;;
	-vv) Verbose=1; verbose=1; shift;;
	-y) shift
	    while [ $# -gt 0 ]; do
		case "$1" in
		    -z) break;;
		    *)  make_opt="$make_opt $1"; shift;;
		esac
	    done;;
	-z) shift
	    while [ $# -gt 0 ]; do
		case "$1" in
		    -y) break;;
		    *) make_macro="$make_macro $1"; shift;;
		esac
	    done;;
	-*) help=1; shift;
	    message="Unknown option $1"
	    break;;
	*)	tmpDirs="$tmpDirs $1"; shift;;
	esac
    done

} # parseCmdLine()

check_XITE_HOME () {
    # XITE_HOME may still be unset.

    XITE_HOME=$1
    progNam=$2

    if [ -z "$XITE_HOME" ]; then
	$echoNl "usage: $progNam [<option>...] [<dir>...] [-y <m-opt>...] "
	echo "[-z <m-macro>]"  1>&2
	echo "The XITE home directory is not known." 1>&2
	dirHelp=1
    fi

    if [ ! -d "$XITE_HOME" -a "$dirHelp" -eq 0 ]; then
	# XITE_HOME has been set in some way

	$echoNl "usage: $progNam [<option>...] [<dir>...] [-y <m-opt>...] "
	echo "[-z <m-macro>]"  1>&2
	echo "The XITE home directory, $XITE_HOME, does not exist." 1>&2
	dirHelp=1
    fi

    if [ "$dirHelp" -eq 1 ]; then
	echo "It must be given in one of the following ways:"              1>&2
	echo "   - As a command-line parameter (first priority)."          1>&2
	echo "   - As the environment variable XITE_HOME (second priority)." \
	    1>&2
	echo "   - Edited into this script (third priority)."              1>&2

	exit 1
    fi

} # check_XITE_HOME()

parseTargets () {
    clean=$1; inc=$2; lib=$3; dso=$4; pro=$5; xpro=$6; doc=$7

    if [ "$clean" -eq 0 -a "$inc" -eq 0 -a "$lib" -eq 0 -a "$pro" -eq 0 \
	-a "$dso" -eq 0 -a "$doc" -eq 0 -a "$xpro" -eq 0 ]
    then
	clean=2; inc=1; lib=1; dso=1; pro=1; doc=1
    fi

    # Derived variables

    [ "$clean" -gt 0 ] && targets="clean"
    [ "$inc" -eq 1 ]   && targets="$targets include"
    [ "$lib" -eq 1 ]   && targets="$targets lib"
    [ "$dso" -eq 1 ]   && targets="$targets dso"

    if [ "$pro" -eq 1 ]; then
	targets="$targets program"
    elif [ "$xpro" -eq 1 ]; then
	targets="$targets xprog"
    fi

    [ "$doc" -eq 1 ]   && targets="$targets doc"
    [ "$clean" -gt 1 ] && targets="$targets clean"

} # parseTargets()

getDirectories () {
    tmpDirs=$1

    if [ -n "$tmpDirs" ]; then
	for dir in $tmpDirs; do
	    arg=`basename $dir`

	    [ "$arg" = '.' ] && arg=`basename \`pwd\``

	    if [ "$arg" = 'src' ]; then
		cd $XITE_HOME/src
		dirs=`/bin/ls`
		break
	    else
		cd $XITE_HOME/src
		if [ ! -d "$arg" ]; then
		    echo "Non-existent directory: $arg"
		    exit 1
		fi
		if [ -z "$dirs" ]; then
		    dirs="$arg"
		else
		    dirs="$dirs $arg"
		fi
	    fi

	done
    else
	cd $XITE_HOME/src
	dirs=`/bin/ls`
    fi

} # getDirectories()

make_final_dir () {
    dir=$1; loc_dir=$2; verbose=$3; Verbose=$4; text=$5; make_args=$6
    
    if [ "$verbose" -eq 1 ]; then
	echo "------------------------------"
	echo "$text $dir."
    fi # $verbose

    command="make -r $make_args"

    # Step into platform-dependent subdirectory if requested

    make_links=0
    if [ "$loc_dir" -ne 0 ]; then
	# Step into platform-dependent subdirectory
	[ ! -d "$XITE_HOSTTYPE" ] && mkdir $XITE_HOSTTYPE

	cd $XITE_HOSTTYPE

	# Make sure the necessary links exist
	if [ ! -f Makefile.defs ]; then
	    $LINK ../Makefile.defs Makefile.defs
	    make_links=1
	fi
	if [ ! -f Makefile ]; then
	    $LINK $makefile Makefile
	    make_links=1
	fi
	if [ $make_links -eq 1 ]; then
	    [ -d ../XPM ] && $LINK ../XPM XPM

	    for f in ../*.[ch] ../*.sh ../*.3 ../*_3.html; do
		[ -f $f ] && $LINK $f `basename $f`
	    done
	fi # $make_links

	[ "$Verbose" -ne 0 ] && echo "    $command"

	eval $command

	cd ..

    else
	# $loc_dir=0

	# Don't step down. Remove Makefile, may correspond to different
	# platform, create new link
	rm Makefile > /dev/null 2>&1
	$LINK $makefile Makefile

	[ "$Verbose" -ne 0 ] && echo "    $command"

	eval $command

    fi # $loc_dir

} # make_final_dir()

make_dir () {
    dir=$1; verbose=$2; Verbose=$3; text=$4; make_args=$5

    if [ "$verbose" -eq 1 ]; then
	echo "------------------------------"
	echo "$text $dir."
    fi # $verbose

    command="make -r $make_args"

    [ "$Verbose" -ne 0 ] && echo "    $command"

    eval $command

} # make_dir()

descend_dir () {
    # $1: Name of subdirectory to make
    # $2: Whether or not to use local platform-dependent subdirectory below $1
    # $3: Whether or not to be verbose
    # $4: Whether or not to be very verbose
    # $5: Text to print for this directory
    # $6: Arguments to 'make', i.e. options, targets, macros

    dir=$1

    if [ ! -d "$dir" \
	-o "$dir" = "CVS" \
	-o "$dir" = "SunOS5" \
	-o "$dir" = "IRIX" \
	-o "$dir" = "IRIX64" \
	-o "$dir" = "SunOS" \
	-o "$dir" = "ULTRIX" \
	-o "$dir" = "AIX" \
	-o "$dir" = "Linux" \
	-o "$dir" = "OSF1" \
	-o "$dir" = "NT4" \
	-o "$dir" = "CYGWIN32" \
	]; then

	return 1;
    fi

    loc_dir=$2; verbose=$3; Verbose=$4; text=$5; make_args=$6

    cd $dir

    # Process this directory before descending into sub-directories

    if [ -f Makefile.defs ]; then
	# Don't descend further.

	make_final_dir "$dir" "$loc_dir" "$verbose" "$Verbose" "$text" \
	    "$make_args"

    elif [ -f Makefile -a ! -f Makefile.defs ]; then
	# No Makefile.defs, but a Makefile. This Makefile will
	# take care of subdirectories.

	make_dir "$dir" "$verbose" "$Verbose" "$text" "$make_args"

    elif [ ! -f Makefile -a ! -f Makefile.defs ]; then
	# Check whether subdirectories exist. Avoid platform-specific
	# subdirectories and CVS-directories
	subdirs=`/bin/ls`
	if [ -n "$subdirs" ]; then
	    for sub in $subdirs; do
		if [ -d $sub ]; then
		    descend_dir "$sub" "$loc_dir" "$verbose" "$Verbose" \
			"$text" "$make_args"
		fi
	    done
	fi # $subdirs
    fi

    cd ..

    return 0

} # descend_dir()

processTarget () {
    target=$1; dirs=$2; except=$3

    case "$target" in
	clean)   text="Cleaning in";;
	include) text="Installing include files for";;
	lib)     text="Compiling functions in";;
	dso)     text="Building dynamic shared objects for archives, in";;
	program) text="Compiling and installing programs in";;
	xprog)   text="Compiling and installing X programs in";;
	doc)     text="Installing documentation for";;
    esac

    # For each directory specified
    for dir in $dirs; do
	if [ -d $dir ]; then
	    isExc=0
	    for exc in $except; do
		if [ "$exc" = "$dir" ]; then
		   isExc=1; break
		fi
	    done

	    # Only process directories which were not excepted during
	    # installation
	    if [ "$isExc" -eq 0 ]; then

		descend_dir "$dir" "$loc_dir" "$verbose" "$Verbose" "$text" \
		    "$make_opt $target $make_macro"

	    fi # ! $isExc
	fi # -d $dir
    done # $dir

} # processTarget()

# A value for XITE_HOME should have been automatically edited in by the
# install_xite script. This can be overridden by a command-line argument or
# an environment variable.

if [ -z "$XITE_HOME" ]; then
    XITE_HOME=
fi

clean=0; inc=0; lib=0; dso=0; pro=0; doc=0; xpro=0; help=0; dirHelp=0;
dirs=""; tmpDirs=""; make_opt=""; make_macro=""; verbose=0; Verbose=0;
targets=""; message=""; loc_dir=0; XITE_HOSTTYPE="";

# Look for a command-line argument for XITE_HOME. Do not check the other
# arguments yet, just store them.

parseCmdLine "$@"
check_XITE_HOME "$XITE_HOME" "$0"

scriptdir=$XITE_HOME/etc

if [ "$XITE_HOSTTYPE" = "NT4" ]; then
    loc_dir=0
    LINK=cp
else
    LINK="ln -s"
fi

if [ ! -d "$scriptdir" ]; then
    echo "XITE script directory, $XITE_HOME/etc, does not exist." 1>&2
    exit 1
fi

utildir=$XITE_HOME/etc/.install
echoNl=$utildir/echonl
getPlatform=$utildir/getPlatform
XITE_HOSTTYPE=`$getPlatform "$XITE_HOSTTYPE" "$utildir" stderr`

if [ ! -d "$utildir" ]; then
    echo "`basename $0`:Directory $utildir does not exist."     1>&2
    echo "Rerun the XITE installation script 'install_xite'."   1>&2
    echo "If it has been removed, you must get XITE once again" 1>&2
    echo "with ftp from 'ftp.ifi.uio.no' in pub/blab/xite."     1>&2
    exit 1
fi

if [ "$help" -eq 1 ]; then
    Usage "$0" "$message"
    exit 1
fi

parseTargets "$clean" "$inc" "$lib" "$dso" "$pro" "$xpro" "$doc"

makefile=$scriptdir/Makefile.$XITE_HOSTTYPE

if [ ! -f "$makefile" ]; then
    echo "There is no makefile $makefile." 1>&2
    exit 1
fi

if [ "$verbose" -eq 1 ]; then
    echo ""
    echo "==================================================================="
    echo "!                                                                 !"
    echo "!     Second part of the installation of the XITE software.       !"
    echo "!                                                                 !"
    echo "!     This part concerns building of the library, the executables !"
    echo "!     and the documentation.                                      !"
    echo "!                                                                 !"
    echo "==================================================================="
    echo ""
fi

#### Finish the installation of XITE

getDirectories "$tmpDirs"

cd $XITE_HOME/src

mask=`umask`
umask 022

# List of directories to except from making.
case "$XITE_HOSTTYPE" in
    *)  except="";;
esac

for target in $targets; do

    processTarget "$target" "$dirs" "$except"

    if [ "$target" = "doc" ]; then
	echo ""
	$echoNl "You may want to check that the manual pages are not read "
        echo "protected."
	echo "Also, you may want to build a 'whatis' or 'windex' database"
        echo "for them."
	echo "Talk to your system manager if you don't understand this."
    fi # doc

done # targets

umask $mask
