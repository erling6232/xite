.\"remove .ig hn for full docs
.de hi
.ig eh
..
.de eh
..
.TH "" 3 "" "Version 3.0" "Free Widget Foundation"
.SH NAME
XfwfPrompt
.SH DESCRIPTION
The Prompt widget is used for short (no more than a few lines) text
entry. It can be used in two modes: either with or without a template.
If there is a template, input will be checked against it and only
accepted if it matches. A template must be accompanied by a pattern,
that gives the acceptable character classes for each position in the
template. A template can include literal characters, e.g., \fI"Enter
date: __-__-__ (DD-MM-YY)"\fP with pattern \fI"99-99-99"\fP means that the
user may enter only digits on the `\fI_\fP' positions.

If the pattern and template do not provide enough validation, or if
there is no template, there is also the possibility of using a
callback after each character is entered. The callback can accept or
reject the new text.

The \fIrvStart\fP resource is used as cursor position.

.SS "Public variables"

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
XfwfPrompt
Name	Class	Type	Default
XtNtext	XtCText	String 	NULL 
XtNtemplate	XtCTemplate	String 	NULL 
XtNpattern	XtCPattern	String 	NULL 
XtNvalidate	XtCValidate	Callback	NULL 
XtNleave	XtCLeave	Callback	NULL 
XtNactivate	XtCActivate	Callback	NULL 
XtNcomplete	XtCComplete	Boolean 	True 
XtNplaceholder	XtCPlaceholder	char 	'_'

.TE
.ps +2

.TP
.I "XtNtext"
The \fItext\fP resource is what is modified by the user. If there is a
template defined, the text will be the portion of the template from
the first `\fI_\fP' to the last.

	

.hi
String  text = NULL 
.eh

.TP
.I "XtNtemplate"
The \fItemplate\fP consists of text with at least one `\fI_\fP' (or, to be
precise, the value of \fIplaceholder\fP). If there is no template, input
of any length is accepted (but see the \fIvalidate\fP callback below).

Note that the \fIlabel\fP resource that is inherited from \fIXfwfLabel\fP is
used to hold the combination of \fItemplate\fP and \fItext\fP. Setting \fIlabel\fP
has no effect, and, indeed, will cause a warning message to be
printed.

	

.hi
String  template = NULL 
.eh

.TP
.I "XtNpattern"
The \fIpattern\fP is only used if there is a \fItemplate\fP. The length of
the \fIpattern\fP must be the length from the first `\fI_\fP' in \fItemplate\fP to
the last. Where the \fItemplate\fP has a `\fI_\fP', the \fIpattern\fP must have
one of:

* `9' only digits are allowed.

* `a' digits, upper- and lowercase letters and spaces.

* `A' digits, uppercase letters and spaces.

* `F' only `safe' file name characters.

* 'f' file name character plus `*' `[', `]' and `?'

* `X' any character.

* `z' digits, upper- and lowercase letters (no spaces)

* `Z' digits, uppercase letters (no spaces).

If the pattern is empty or too short, it will be extended with X's.

	

.hi
String  pattern = NULL 
.eh

.TP
.I "XtNvalidate"
The \fIvalidate\fP callbacks are called when the text changes, because a
letter is added or removed. The callback get a pointer to an
\fIXfwfPromptInfo\fP structure as \fIcall_data\fP. The structure includes a
field \fIreply\fP, which should be set to \fIXfwfReject\fP, \fIXfwfAccept\fP or
\fIXfwfComplete\fP. The first causes the new text to be rejected with a
`beep'; the second sets the \fIcomplete\fP resource to \fIFalse\fP, to
indicate that the text is valid, but not yet complete; the third sets
the \fIcomplete\fP resource to \fITrue\fP.

	

.hi
<Callback> XtCallbackList  validate = NULL 
.eh

.TP
.I "XtNleave"
The \fIleave\fP callback is called when the focus leaves the prompt
widget. This is usually a sign that the user is ready entering the
text. The final text is passed in the \fIcall_data\fP argument.

	

.hi
<Callback> XtCallbackList  leave = NULL 
.eh

.TP
.I "XtNactivate"
The \fIactivate\fP callback is invoked from the \fIactivate\fP action, which
is normally bound to the Return key. The \fIcall_data\fP argument of the
callbacks routines is filled with a pointer to the event that
triggered the action. This callback can be used in a dialog box, for
example, to activate the default button.

	

.hi
<Callback> XtCallbackList  activate = NULL 
.eh

.TP
.I "XtNcomplete"
The resource \fIcomplete\fP is always \fITrue\fP, unless the most recent
call to the \fIvalidate\fP callback returned \fIXfwfAccept\fP.

	

.hi
Boolean  complete = True 
.eh

.TP
.I "XtNplaceholder"
The character thatis used as the placeholder can be changed from the
default `\fI_\fP' by setting the \fIplaceholder\fP resource. Note that this
character will also be used in the \fItext\fP string to indicate open
places.

	

.hi
char  placeholder = '_'
.eh

.TP
.I "XtNcursor"
The cursor is by default a vertical bar, called the `xterm' cursor.

	

.hi
 cursor = <String>"xterm"
.eh

.TP
.I "XtNtraversalOn"
Since prompts, in contrast to labels, should receive keyboard
events, the \fItraversalOn\fP resource is by default \fITrue\fP.

	

.hi
 traversalOn = True 
.eh

.TP
.I "XtNframeWidth"
The default frame width is also given a different value.

	

.hi
 frameWidth = 2 
.eh

.TP
.I "XtNframeType"
As is the frame type

	

.hi
 frameType = XfwfSunken 
.eh

.TP
.I "XtNalignment"
The default alignment of text is changed to center-left.

	

.hi
 alignment = XfwfLeft 
.eh

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
XfwfLabel
Name	Class	Type	Default
XtNlabel	XtCLabel	String 	NULL 
XtNtablist	XtCTablist	String 	NULL 
XtNfont	XtCFont	FontStruct	XtDefaultFont 
XtNforeground	XtCForeground	Pixel 	XtDefaultForeground 
XtNhlForeground	XtCHlForeground	Pixel 	XtDefaultForeground 
XtNalignment	XtCAlignment	Alignment 	0 
XtNtopMargin	XtCTopMargin	Dimension 	2 
XtNbottomMargin	XtCBottomMargin	Dimension 	2 
XtNleftMargin	XtCLeftMargin	Dimension 	2 
XtNrightMargin	XtCRightMargin	Dimension 	2 
XtNshrinkToFit	XtCShrinkToFit	Boolean 	False 
XtNrvStart	XtCRvStart	Int 	0 
XtNrvLength	XtCRvLength	Int 	0 
XtNhlStart	XtCHlStart	Int 	0 
XtNhlLength	XtCHlLength	Int 	0 

.TE
.ps +2

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
XfwfBoard
Name	Class	Type	Default
XtNabs_x	XtCAbs_x	Position 	0 
XtNrel_x	XtCRel_x	Float 	"0.0"
XtNabs_y	XtCAbs_y	Position 	0 
XtNrel_y	XtCRel_y	Float 	"0.0"
XtNabs_width	XtCAbs_width	Position 	0 
XtNrel_width	XtCRel_width	Float 	"1.0"
XtNabs_height	XtCAbs_height	Position 	0 
XtNrel_height	XtCRel_height	Float 	"1.0"
XtNhunit	XtCHunit	Float 	"1.0"
XtNvunit	XtCVunit	Float 	"1.0"
XtNlocation	XtCLocation	String 	NULL 

.TE
.ps +2

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
XfwfFrame
Name	Class	Type	Default
XtNcursor	XtCCursor	Cursor 	None 
XtNframeType	XtCFrameType	FrameType 	XfwfRaised 
XtNframeWidth	XtCFrameWidth	Dimension 	0 
XtNouterOffset	XtCOuterOffset	Dimension 	0 
XtNinnerOffset	XtCInnerOffset	Dimension 	0 
XtNshadowScheme	XtCShadowScheme	ShadowScheme 	XfwfAuto 
XtNtopShadowColor	XtCTopShadowColor	Pixel 	compute_topcolor 
XtNbottomShadowColor	XtCBottomShadowColor	Pixel 	compute_bottomcolor 
XtNtopShadowStipple	XtCTopShadowStipple	Bitmap 	NULL 
XtNbottomShadowStipple	XtCBottomShadowStipple	Bitmap 	NULL 

.TE
.ps +2

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
XfwfCommon
Name	Class	Type	Default
XtNtraversalOn	XtCTraversalOn	Boolean 	True 
XtNhighlightThickness	XtCHighlightThickness	Dimension 	2 
XtNhighlightColor	XtCHighlightColor	Pixel 	XtDefaultForeground 
XtNhighlightPixmap	XtCHighlightPixmap	Pixmap 	None 
XtNnextTop	XtCNextTop	Callback	NULL 
XtNuserData	XtCUserData	Pointer	NULL 

.TE
.ps +2

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
Composite
Name	Class	Type	Default
XtNchildren	XtCChildren	WidgetList 	NULL 
insertPosition	XtCInsertPosition	XTOrderProc 	NULL 
numChildren	XtCNumChildren	Cardinal 	0 

.TE
.ps +2

.ps -2
.TS
center box;
cBsss
lB|lB|lB|lB
l|l|l|l.
Core
Name	Class	Type	Default
XtNx	XtCX	Position 	0 
XtNy	XtCY	Position 	0 
XtNwidth	XtCWidth	Dimension 	0 
XtNheight	XtCHeight	Dimension 	0 
borderWidth	XtCBorderWidth	Dimension 	0 
XtNcolormap	XtCColormap	Colormap 	NULL 
XtNdepth	XtCDepth	Int 	0 
destroyCallback	XtCDestroyCallback	XTCallbackList 	NULL 
XtNsensitive	XtCSensitive	Boolean 	True 
XtNtm	XtCTm	XTTMRec 	NULL 
ancestorSensitive	XtCAncestorSensitive	Boolean 	False 
accelerators	XtCAccelerators	XTTranslations 	NULL 
borderColor	XtCBorderColor	Pixel 	0 
borderPixmap	XtCBorderPixmap	Pixmap 	NULL 
background	XtCBackground	Pixel 	0 
backgroundPixmap	XtCBackgroundPixmap	Pixmap 	NULL 
mappedWhenManaged	XtCMappedWhenManaged	Boolean 	True 
XtNscreen	XtCScreen	Screen *	NULL 

.TE
.ps +2

.SS "Exports"

The \fIXfwfPromptInfo\fP is what is passed to the \fIvalidate\fP callback
after the text has changed. It contains pointers to the old and the
new text and a boolean field \fIresult\fP that is initially set to
\fIXfwfComplete\fP, but that may be changed by the callback routine, when
the new text is unacceptable, or acceptable but not complete.

	

.nf

.B type
 XfwfPromptInfoResult = enum {
		XfwfReject, XfwfAccept, XfwfComplete
	}
.fi

.nf

.B type
 XfwfPromptInfo = struct {
		String oldstring;
		String newstring;
		Boolean result;
	}
.fi

.SS "Translations"

The traversal code is added, except for \fI<Key>Left: traverseLeft()\fP
and \fI<Key>Right: traverseRight()\fP, which are used for other purposes.

.nf
<FocusIn>: focusIn() 
.fi

.nf
<FocusOut>: leave() focusOut() 
.fi

removed: trans	<Visible>:		visibility()

removed: trans	<Unmap>:		unmap()

.nf
<Key>Up: traverseUp() 
.fi

.nf
<Key>Down: traverseDown() 
.fi

.nf
<Key>Next: traverseNext() 
.fi

.nf
~Shift<Key>Tab: traverseNext() 
.fi

.nf
<Key>Prior: traversePrev() 
.fi

.nf
Shift<Key>Tab: traversePrev() 
.fi

.nf
<Key>KP_Enter: traverseNextTop() 
.fi

.nf
<Key>Home: traverseHome() 
.fi

.nf
Shift<Btn1Down>: extend_select() 
.fi

.nf
<Btn1Down>: traverseCurrent() start_select() 
.fi

.nf
<Btn1Motion>: extend_select() 
.fi

.nf
<Btn1Up>: end_select() 
.fi

.nf
<Btn2Down>,<Btn2Up>: paste() 
.fi

.nf
<Key>BackSpace: cut() backspace() 
.fi

.nf
Ctrl<Key>d: cut() delete() 
.fi

.nf
<Key>Right: unselect() right() 
.fi

.nf
<Key>Left: unselect() left() 
.fi

.nf
Ctrl<Key>a: unselect() bol() 
.fi

.nf
Ctrl<Key>e: unselect() eol() 
.fi

.nf
<Key>Return: activate() 
.fi

.nf
<Key>: cut() self_insert() 
.fi

.hi
.SS "Actions"

.TP
.I "activate

The \fIactivate\fP action just calls the \fIactivate\fP callback functions,
passing the \fIXEvent\fP pointer in the \fIcall_data\fP argument.

.hi

.nf
void activate($, XEvent* event, String* params, Cardinal* num_params)
{
    XtCallCallbackList($, $activate, event);
}
.fi

.eh

.TP
.I "leave

The \fIleave\fP action calls the \fIleave\fP callbacks with the current
\fItext\fP as \fIcall_data\fP.

.hi

.nf
void leave($, XEvent* event, String* params, Cardinal* num_params)
{
    if (event->type == FocusOut
	 event->xfocus.detail != NotifyAncestor
	 event->xfocus.detail != NotifyInferior
	 event->xfocus.detail != NotifyNonlinear) return;
    XtCallCallbackList($, $leave, $text);
}
.fi

.eh

.TP
.I "start_select

The \fIstart_select\fP action sets the cursor position as close as
possible to the mouse position, but only if the mouse actually points
at some text. It also removes any previous selection, preparing for a
new one.

.hi

.nf
void start_select($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;
    Cardinal pos;

    if (find_cursor($, event->xbutton, $rvStart)) {
	$rvLength = 0;
	$compute_inside($, x, y, w, h);
	XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
    }
}
.fi

.eh

.TP
.I "extend_select

The \fIextend_select\fP action extends the selection to the current
cursor position.

.hi

.nf
void extend_select($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;
    int pos, len, start;

    if (find_cursor($, event->xbutton, pos)) {
	len = abs(pos - $rvStart);
	start = min(pos, $rvStart);
	if (len != $rvLength || start != $rvStart) {
	    $rvLength = len;
	    $rvStart = start;
	    $compute_inside($, x, y, w, h);
	    XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
	}
    }
}
.fi

.eh

.TP
.I "end_select

The \fIend_select\fP action copies the selected text to the clipboard.

.hi

.nf
void end_select($, XEvent* event, String* params, Cardinal* num_params)
{
    if ($rvLength == 0) return;
    if (! XtOwnSelection($, XA_PRIMARY, event->xbutton.time,
			 convert_proc, lose_ownership_proc, NULL)) {
	XtWarning("failed attempting to become selection owner.");
	return;
    }
    XtFree($selection_buffer);
    $selection_buffer = XtMalloc(sizeof(char) * ($rvLength + 1));
    (void) strncpy($selection_buffer, $label + $rvStart, $rvLength);
    $selection_buffer[$rvLength] = '\\0';
}
.fi

.eh

.TP
.I "paste

The \fIpaste\fP action requests the contents of the clipboard in
string-format and tries to insert it into the text.

.hi

.nf
void paste($, XEvent* event, String* params, Cardinal* num_params)
{
    XtGetSelectionValue($, XA_PRIMARY, XA_STRING, paste_callback, NULL,
			event->xbutton.time);
}
.fi

.eh

.TP
.I "unselect

The \fIunselect\fP action restores the text that was shown in reverse to
normal.

.hi

.nf
void unselect($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;

    if ($rvLength != 0) {
	$rvLength = 0;
	$compute_inside($, x, y, w, h);
	XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
    }
}
.fi

.eh

.TP
.I "cut

The \fIcut\fP action deletes the highlighted portion from the text.

.hi

.nf
void cut($, XEvent* event, String* params, Cardinal* num_params)
{
    int j, i;
    XfwfPromptInfo info;
    String newlabel;

    if ($rvLength == 0) return;
    info.oldstring = XtNewString($text);
    if ($template == NULL) {
	j = strlen($text);
	i = min($rvStart + $rvLength, j) - 1;
	for (; i >= $rvStart; i--, j--) delete_from_run($, i, j, '\\0');
    } else {
	i = min($rvStart + $rvLength, $text_start + $text_len) - 1;
	for (; i >= $rvStart; i--) {
	    if ($template[i] != $placeholder) continue;
	    j = find_end_of_run($, i);
	    delete_from_run($, i - $text_start, j - $text_start, $placeholder);
	}
    }
    info.newstring = $text;
    info.result = XfwfComplete;
    XtCallCallbackList($, $validate, info);
    switch (info.result) {
    case XfwfReject: XtFree($text); $text = info.oldstring; return;
    case XfwfAccept: XtFree(info.oldstring); $complete = False; break;
    case XfwfComplete: XtFree(info.oldstring); $complete = True; break;
    }
    if ($template == NULL) {
	$set_label($, $text);
    } else {
	newlabel = XtNewString($template);
	for (j = 0; j < $text_len; j++) newlabel[j+$text_start] = $text[j];
	$set_label($, newlabel);
	XtFree(newlabel);
    }
    $rvLength = 0;
}
.fi

.eh

.TP
.I "self_insert

The \fIself_insert\fP function inserts the key that was pressed into the
text. If the key is not a printable key, it does nothing. If the key
doesn't match the pattern, it does nothing. If the callback \fIvalidate\fP
returns \fIXfwfReject\fP, it does nothing.

.hi

.nf
void self_insert($, XEvent* event, String* params, Cardinal* num_params)
{
    KeySym keysym;
    int n, i;
    char buf[100];
    XfwfPromptInfo info;
    String newlabel;

    if (event->type != KeyPress  event->type != KeyRelease) {
	XtWarning("action <self_insert> can only handle keyboard events");
	return;
    }
    info.oldstring = XtNewString($text);
    n = XLookupString(event->xkey, buf, sizeof(buf), keysym, $compose_stat);
    for (i = 0; i < n; i++) insert_char($, buf[i]);
    info.newstring = $text;
    info.result = XfwfComplete;
    XtCallCallbackList($, $validate, info);
    switch (info.result) {
    case XfwfReject: XtFree($text); $text = info.oldstring; return;
    case XfwfAccept: XtFree(info.oldstring); $complete = False; break;
    case XfwfComplete: XtFree(info.oldstring); $complete = True; break;
    }
    if ($template == NULL)
	$set_label($, $text);
    else {
	newlabel = XtNewString($template);
	for (i = 0; i < $text_len; i++) newlabel[i+$text_start] = $text[i];
	$set_label($, newlabel);
	XtFree(newlabel);
    }
}
.fi

.eh

.TP
.I "bol

The \fIbol\fP action moves the cursor to the leftmost placeholder.

.hi

.nf
void bol($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;

    if ($rvStart == $text_start) return;
    $rvStart = $text_start;
    $compute_inside($, x, y, w, h);
    XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
}
.fi

.eh

.TP
.I "eol

The \fIeol\fP action moves the cursor to the end of the label, if it
isn't there already.

.hi

.nf
void eol($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;

    if ($template == NULL) {
	if ($label[$rvStart] == '\\0') return;
	do { $rvStart++; } while ($label[$rvStart]);
    } else {
	if ($rvStart == $text_start + $text_len) return;
	$rvStart = $text_start + $text_len;
    }
    $compute_inside($, x, y, w, h);
    XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
}
.fi

.eh

.TP
.I "left

The \fIleft\fP action moves the cursor one position to the left, unless
there are no more placeholders in that direction.

.hi

.nf
void left($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;

    if ($rvStart == $text_start) return;
    if ($template == NULL)
	$rvStart--;
    else
	do { $rvStart--; } while ($template[$rvStart] != $placeholder);
    $compute_inside($, x, y, w, h);
    XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
}
.fi

.eh

.TP
.I "right

The \fIright\fP action moves the cursor one position to the right,
unless it is already at the end of the template.

.hi

.nf
void right($, XEvent* event, String* params, Cardinal* num_params)
{
    Position x, y;
    Dimension w, h;

    if ($template == NULL) {
	if ($label[$rvStart] == '\\0') return;
	$rvStart++;
    } else {
	if ($rvStart == $text_start + $text_len) return;
	do { $rvStart++; } while ($template[$rvStart] != $placeholder);
    }
    $compute_inside($, x, y, w, h);
    XClearArea(XtDisplay($), XtWindow($), x, y, w, h, True);
}
.fi

.eh

.TP
.I "delete

The \fIdelete\fP action removes the character to the right of the
cursor, if there is any. The rest of the characters in the same run
will shift to the left.

.hi

.nf
void delete($, XEvent* event, String* params, Cardinal* num_params)
{
    int j;
    XfwfPromptInfo info;
    String newlabel;

    if ($template == NULL) {
	if (! $text || $text[$rvStart] == '\\0') return;
	info.oldstring = XtNewString($text);
	j = strlen($text);
	delete_from_run($, $rvStart, j, '\\0');
    } else {
	if ($template[$rvStart] != $placeholder) return;
	info.oldstring = XtNewString($text);
	j = find_end_of_run($, $rvStart) - $text_start;
	delete_from_run($, $rvStart - $text_start, j, $placeholder);
    }
    info.newstring = $text;
    info.result = XfwfComplete;
    XtCallCallbackList($, $validate, info);
    switch (info.result) {
    case XfwfReject: XtFree($text); $text = info.oldstring; return;
    case XfwfAccept: XtFree(info.oldstring); $complete = False; break;
    case XfwfComplete: XtFree(info.oldstring); $complete = True; break;
    }
    if ($template == NULL) {
	$set_label($, $text);
    } else {
	newlabel = XtNewString($template);
	for (j = 0; j < $text_len; j++) newlabel[j+$text_start] = $text[j];
	$set_label($, newlabel);
	XtFree(newlabel);
    }
}
.fi

.eh

.TP
.I "backspace

The \fIbackspace\fP action removes the character to the left of the
cursor, if there is any. The cursor moves left and all characters in
the same run move left.

.hi

.nf
void backspace($, XEvent* event, String* params, Cardinal* num_params)
{
    int j;
    XfwfPromptInfo info;
    String newlabel;

    if ($rvStart == $text_start) return;
    info.oldstring = XtNewString($text);
    if ($template == NULL) {
	$rvStart--;
	j = strlen($label);
	delete_from_run($, $rvStart, j, '\\0');
    } else {
	do { $rvStart--; } while ($template[$rvStart] != $placeholder);
	j = find_end_of_run($, $rvStart) - $text_start;
	delete_from_run($, $rvStart - $text_start, j, $placeholder);
    }
    info.newstring = $text;
    info.result = XfwfComplete;
    XtCallCallbackList($, $validate, info);
    switch (info.result) {
    case XfwfReject: XtFree($text); $text = info.oldstring; return;
    case XfwfAccept: XtFree(info.oldstring); $complete = False; break;
    case XfwfComplete: XtFree(info.oldstring); $complete = True; break;
    }
    if ($template == NULL) {
	$set_label($, $text);
    } else {
	newlabel = XtNewString($template);
	for (j = 0; j < $text_len; j++) newlabel[j+$text_start] = $text[j];
	$set_label($, newlabel);
	XtFree(newlabel);
    }
}
.fi

.eh

.hi

.hi
.SH "Importss"

.nf

.B incl
 <ctype.h>
.fi

.nf

.B incl
 <stdio.h>
.fi

.nf

.B incl
 <X11/Xatom.h>
.fi

.nf

.B incl
 <X11/Xmu/Atoms.h>
.fi

.hi

.hi
.SS "Private variables"

The start and length of the entry part of the template is stored in
two private variables.

	

.nf
int  text_start
.fi

.nf
int  text_len
.fi

Between keypresses, the \fIXComposeStatus\fP is retained.

	

.nf
XComposeStatus  compose_stat
.fi

If the widget is the owner of the selection, the text of the
selection is stored here.

	

.nf
String  selection_buffer
.fi

.hi

.hi
.SS "Methods"

The \fIinitialize\fP method initializes the private variables, with the
help of a utility routine. That routine also checks if \fIpattern\fP and
\fItemplate\fP agree.

All String resources are copied to new allocated space, so that the
application can change or throw away the original strings.

.nf
initialize(Widget  request, $, ArgList  args, Cardinal * num_args)
{
    if ($label != NULL)
	XtWarning("The label resource of a Prompt should not be set");
    $text_start = 0;
    if ($text != NULL) $text = XtNewString($text);
    if ($template != NULL) $template = XtNewString($template);
    if ($pattern != NULL) $pattern = XtNewString($pattern);
    set_text_start($);
    while ($rvStart > $text_start + $text_len) $rvStart--;
    while ($rvStart < $text_start) $rvStart++;
    $selection_buffer = NULL;
}
.fi

The \fIset_values\fP method copies all string resources that have
changed to new heap space, and calls \fIset_text_start\fP to compute the
\fItext_start\fP and \fItext_end\fP and to set the \fIlabel\fP resource.

.nf
Boolean  set_values(Widget  old, Widget  request, $, ArgList  args, Cardinal * num_args)
{
    Boolean need_redisplay = False, reset_text = False;

    if ($old$text != $text) {
	XtFree($old$text);
	$text = XtNewString($text);
	reset_text = True;
    }
    if ($old$template !=$template) {
	XtFree($old$template);
	$template = XtNewString($template);
	reset_text = True;
    }
    if ($old$pattern != $pattern) {
	XtFree($old$pattern);
	$pattern = XtNewString($pattern);
	reset_text = True;
    }
    if (reset_text || $old$placeholder != $placeholder) {
	set_text_start($);
	need_redisplay = True;
    }
    return need_redisplay;
}
.fi

The \fIexpose\fP method does much of the work that is also done by the
superclass, but without actually drawing anything. The only thing that
is drawn is the cursor.

.nf
expose($, XEvent * event, Region  region)
{
    Region reg;
    XRectangle rect;
    int baseline, i, j;
    Dimension w;
    int x, y;

    if (! XtIsRealized($)) return;
    #expose($, event, region);
    if ($label == NULL) return;
    baseline = $font->ascent + $font->descent;
    $compute_inside($, rect.x, rect.y, rect.width, rect.height);
    rect.x += $leftMargin;  rect.width -= $leftMargin + $rightMargin;
    rect.y += $topMargin;  rect.height -= $topMargin + $bottomMargin;
    if ($alignment  XfwfTop)
	y = rect.y + $font->ascent;
    else if ($alignment  XfwfBottom)
	y = rect.y + rect.height - $nlines * baseline + $font->ascent;
    else
	y = rect.y + (rect.height - $nlines * baseline)/2 + $font->ascent;
    for (i = 0, j = 0; True; i++) {
	if ($label[i] == '\\n' || $label[i] == '\\0') {
	    if (j <= $rvStart  $rvStart <= i) {
		w = XfwfTextWidth($font, $label + j, i - j, $tabs);
		if ($alignment  XfwfLeft) x = rect.x;
		else if ($alignment  XfwfRight) x = rect.x + rect.width - w;
		else x = rect.x + (rect.width - w)/2;
		x += XfwfTextWidth($font, $label + j, $rvStart - j, $tabs);
		XDrawLine(XtDisplay($), XtWindow($), $gc, x, y -
			  $font->ascent, x, y + $font->descent);
		break;
	    }
	    j = i + 1;
	    y += baseline;
	}
    }
}
.fi

.hi

.hi
.SH "Utilities"

The \fIfind_cursor\fP function sets the cursor position \fIpos\fP to the
character closest to the mouse coordinates, it returns \fITrue\fP if it
succeeded, else \fIFalse\fP.

.nf
Boolean  find_cursor($, XButtonEvent * event, int * pos)
{
    XRectangle rect;
    int baseline, i, j;
    Dimension w;
    int x, y;

    if (! XtIsRealized($)) return False;
    if ($label == NULL) return False;
    baseline = $font->ascent + $font->descent;
    $compute_inside($, rect.x, rect.y, rect.width, rect.height);
    rect.x += $leftMargin;  rect.width -= $leftMargin + $rightMargin;
    rect.y += $topMargin;  rect.height -= $topMargin + $bottomMargin;
    if ($alignment  XfwfTop)
	y = rect.y;
    else if ($alignment  XfwfBottom)
	y = rect.y + rect.height - $nlines * baseline;
    else
	y = rect.y + (rect.height - $nlines * baseline)/2;
    i = 0;
    j = 0;
    do {
	if ($label[i] == '\\n' || $label[i] == '\\0') {
	    if (y <= event->y  event->y < y + baseline) {
		find_cursor_in_line($, rect, event->x, event->y, j, i, pos);
		return True;
	    } else {
		j = i + 1;
		y += baseline;
	    }
	}
    } while ($label[i++]);
    return False;
}
.fi

\fIfind_cursor\fP makes use of an auxiliary function
\fIfind_cursor_in_line\fP, which is called when the mouse is on the line
between \fI$label[j]\fP and \fI$label[i]\fP.

.nf
find_cursor_in_line($, XRectangle  rect, int  mx, int  my, int  j, int  i, int * pos)
{
    Dimension w;
    int x;

    w = XfwfTextWidth($font, $label + j, i - j, $tabs);
    if ($alignment  XfwfLeft)
	x = rect.x;
    else if ($alignment  XfwfRight)
	x = rect.x + rect.width - w;
    else
	x = rect.x + (rect.width - w)/2;
    if (x + w <= mx) {				/* Mouse right of the text */
	if ($template == NULL)
	    *pos = i;
	else {					/* Find placeholder */
	    while (i > $text_start  $template[i] != $placeholder) i--;
	    *pos = i;
	}
    } else if (mx < x) {			/* Mouse left of the text */
	if ($template == NULL)
	    *pos = j;
	else {					/* Find placeholder */
	    while (j > $text_start  $template[j] != $placeholder) j--;
	    *pos = j;
	}
    } else {					/* Mouse points in the text */
	for (w = 0; True; j++) {
	    w += XfwfTextWidth($font, $label + j, 1, $tabs);
	    if (x + w >= mx) break;
	}
	if ($template == NULL)
	    *pos = j;
	else if (j >= $text_start + $text_len)
	    *pos = $text_start + $text_len;
	else if (j <= $text_start)
	    *pos = $text_start;
	else {					/* Find nearest placeholder */
	    while (j > $text_start  $template[j] != $placeholder) j--;
	    *pos = j;
	}
    }
}
.fi

The \fIinsert_char\fP function tries to insert a character at the cursor
position. If it matches the pattern, it is inserted, otherwise, if it
matches the next literal character in the template, the cursor will
skip to that position. If a character could be inserted, the
\fIvalidate\fP callback is called. If that returns \fIXfwfReject\fP, the old
situation is restored.

If there is no template, only the callback is called.

The first few functions deal with `runs', which are defined as rows of
consecutive placeholders with the same pattern character.
\fIfind_end_of_run\fP looks for the first character beyond the end of the
run that starts at \fIstart\fP.

.nf
int  find_end_of_run($, int  start)
{
    int i, j;

    i = start + 1;
    j = i - $text_start;
    while ($template[i] == $placeholder  $pattern[j] == $pattern[j-1]) {
	i++;
	j++;
    }
    return i;
}
.fi

\fIinsert_in_run\fP inserts character \fIc\fP at position \fIstart\fP in
\fItext\fP, shifting the rest of the characters in the run one position
forward.

.nf
insert_in_run($, int  start, int  end, int  c)
{
    int i;

    for (i = end - 1; i > start; i--) $text[i] = $text[i-1];
    $text[start] = c;
}
.fi

\fIdelete_from_run\fP shift all characters in the run to the left, the
last character will become a placeholder (\fIfiller\fP), the first
character will disappear.

.nf
delete_from_run($, int  start, int  end, int  filler)
{
    int i;

    for (i = start; i < end - 1; i++) $text[i] = $text[i+1];
    $text[end-1] = filler;
}
.fi

If the characer \fIc\fP is in the class indicated by \fIclass\fP, the
function returns \fITrue\fP.

.nf
Boolean  matches(int  c, int  class)
{
    if (class == '9') return isdigit(c);
    if (class == 'a') return isalnum(c) || isspace(c);
    if (class == 'A') return isdigit(c) || isupper(c) || isspace(c);
    if (class == 'F')
	return isgraph(c)  c != '*'  c != '?'  c != '['  c != ']';
    if (class == 'f') return isgraph(c);
    if (class == 'X') return isascii(c);
    if (class == 'z') return isalnum(c);
    if (class == 'Z') return isdigit(c) || isupper(c);
    XtWarning("Cannot happen: incorrect pattern");
    return True;
}
.fi

The \fIinsert_char\fP function. \fIc\fP is really a character, not an \fIint\fP.

.nf
insert_char($, int  c)
{
    int j;

    if (! $template) {
	j = strlen($text);
	$text = XtRealloc($text, j + 2);
	$text[j+1] = '\\0';
	insert_in_run($, $rvStart, j + 1, c);
	$rvStart++;
    } else {
	if ($template[$rvStart] != $placeholder) {
	    XBell(XtDisplay($), 50);		/* At end of template */
	    return;
	}
	j = find_end_of_run($, $rvStart);
	if (matches(c, $pattern[$rvStart - $text_start])) {
	    insert_in_run($, $rvStart - $text_start, j - $text_start, c);
	    do {
		$rvStart++;
	    } while ($rvStart < $text_start + $text_len
		      $template[$rvStart] != $placeholder);
	} else if (c == $template[j]) {
	    while ($template[j]  $template[j] != $placeholder) j++;
	    $rvStart = j;
	} else {
	    XBell(XtDisplay($), 50);
	}
    }
}
.fi

\fIset_text_start\fP checks if \fIpattern\fP and \fItemplate\fP agree and if so,
sets the private variables \fItext_start\fP and \fItext_len\fP appropriately.
The \fIlabel\fP resource is set to the value of \fItemplate\fP with \fItext\fP
substituted. If \fItext\fP is too short, it is extended.

\fBdef\fP pattern_char(c) =
(c =='9'||c =='a'||c =='A'||c =='F'||c =='f'||c =='X'||c =='z'||c =='Z')

.nf
set_text_start($)
{
    int i, j, k;
    String newlabel;

    if ($template == NULL) {
	newlabel = XtNewString($text);
	XtVaSetValues($, XtNlabel, newlabel, NULL);
	XtFree(newlabel);
	return;
    }
    /*
     * Find start and end in template
     */
    for (i = 0; $template[i]  $template[i] != '_'; i++) ; /* skip */
    for (k = i, j = i; $template[j]; j++) if ($template[j] == '_') k = j;
    $text_start = i;
    $text_len = k + 1 - i;
    /*
     * Check the pattern, first the length, then the contents
     */
    if ($pattern == NULL) {
	$pattern = XtMalloc(($text_len + 1)*sizeof(char));
	$pattern[0] = '\\0';
    } else if (strlen($pattern) < $text_len) {
	$pattern = XtRealloc($pattern, ($text_len + 1)*sizeof(char));
    }
    for (i = strlen($pattern); i < $text_len; i++)
	$pattern[i] = 'X';
    for (i = $text_start, k = 0; k < $text_len; i++, k++)
	if ($template[i] == $placeholder  ! pattern_char($pattern[k])) {
	    XtWarning("Pattern doesn't match template");
	    $pattern[k] = 'X';
	}
    $pattern[k] = '\\0';
    /*
     * Check the length of the text
     */
    if ($text == NULL) {
	$text = XtMalloc(($text_len + 1)*sizeof(char));
	$text[0] = '\\0';
    } else if (strlen($text) < $text_len) {
	$text = XtRealloc(XtNewString($text), ($text_len + 1)*sizeof(char));
    }
    for (j = strlen($text); j < $text_len; j++)
	$text[j] = $template[j+$text_start];
    /*
     * Initialize the label
     */
    newlabel = XtNewString($template);
    for (i = $text_start, j = 0; j < $text_len; i++, j++)
	newlabel[i] = $text[j];
    $set_label($, newlabel);
    XtFree(newlabel);
}
.fi

The procedure to convert the selection.

.nf
Boolean  convert_proc($, Atom * selection, Atom * target, Atom * type, XtPointer * value, unsigned  long * length, int * format)
{
    Display* d = XtDisplay($);
    XSelectionRequestEvent* req = XtGetSelectionRequest($, *selection, NULL);

    if (*target == XA_TARGETS(d)) {
	Atom* targetP;
	Atom* std_targets;
	unsigned long std_length;
	XmuConvertStandardSelection($, req->time, selection, target,
				    type, (XtPointer*)std_targets,
				    std_length, format);
	*value = XtMalloc(sizeof(Atom) * (std_length + 1));
	targetP = *(Atom**) value;
	*targetP++ = XA_STRING;
	*length = std_length + (targetP - (*(Atom **) value));
	bcopy((char*)std_targets, (char*)targetP, sizeof(Atom)*std_length);
	XtFree((char*)std_targets);
	*type = XA_ATOM;
	*format = sizeof(Atom) * 8;
	return True;
    }
    if (*target == XA_STRING) {
	*type = XA_STRING;
	*length = sizeof(char) * (strlen($selection_buffer) + 1);
    	*value = XtNewString($selection_buffer);
    	*format = 8;
    	return True;
    }
    if (XmuConvertStandardSelection($, req->time, selection, target,
				    type, value, length, format))
	return True;

    return False;
}
.fi

The procedure \fIlose_ownership_proc\fP is called when another window
takes over the ownership of the selection. There is nothing to do.
(Maybe the reversed text should be restored?)

.nf
lose_ownership_proc($, Atom * selection)
{
}
.fi

The routine \fIpaste_callback\fP is called by Xt after the selection is
requested in the \fIpaste\fP action. It is handed the contents of the
selection, which it will insert into the text of the Prompt.

.nf
paste_callback($, XtPointer  client_data, Atom * selection, Atom * type, XtPointer  value, unsigned  long * length, int * format)
{
    String data = (String) value;
    XfwfPromptInfo info;
    int i;
    String newlabel;

    if (value == NULL  *length == 0) {
	XBell(XtDisplay($), 50);
	/* XtWarning("no selection or selection timed out, try again"); */
	return;
    }
    info.oldstring = XtNewString($text);
    for (i = 0; i < *length  data[i]; i++)
	insert_char($, data[i]);
    info.newstring = $text;
    info.result = XfwfComplete;
    XtCallCallbackList($, $validate, info);
    switch (info.result) {
    case XfwfReject: XtFree($text); $text = info.oldstring; return;
    case XfwfAccept: XtFree(info.oldstring); $complete = False; break;
    case XfwfComplete: XtFree(info.oldstring); $complete = True; break;
    }
    if ($template == NULL)
	$set_label($, $text);
    else {
	newlabel = XtNewString($template);
	for (i = 0; i < $text_len; i++) newlabel[i+$text_start] = $text[i];
	$set_label($, newlabel);
	XtFree(newlabel);
    }
    XtFree(value);
}
.fi

.hi
